Associated_burden_averted   = Associated_death_averted_vp,
ylabel = "Vaccine Avertable Deaths",
ylim_max = 150000)
daly_averted_by_vp_graph <- create_burden_averted_by_vp_graph(
Attributable_burden_averted = Attributable_daly_averted_vp,
Associated_burden_averted   = Associated_daly_averted_vp,
ylabel = "Vaccine Avertable DALYs",
ylim_max = 13000000)
# create graph with avertable AMR burden by vaccine profile -- High-potential Scenario
death_averted_by_vp_graph_opt <- create_burden_averted_by_vp_graph(
Attributable_burden_averted = Attributable_death_averted_vp_opt,
Associated_burden_averted   = Associated_death_averted_vp_opt,
ylim_max = 350000,
ylabel = "Vaccine Avertable Deaths")
daly_averted_by_vp_graph_opt <- create_burden_averted_by_vp_graph(
Attributable_burden_averted = Attributable_daly_averted_vp_opt,
Associated_burden_averted   = Associated_daly_averted_vp_opt,
ylim_max = 15000000,
ylabel = "Vaccine Avertable DALYs")
# create Figure
death_averted_by_vp_graph / daly_averted_by_vp_graph
# save the image file
ggsave (filename = "Figure_burden_averted_by_vaccine_profile.png",
path = "figures",
width = 6,
height = 9,
dpi = 600)
ggsave (filename = "Figure_avertable_burden_by_vaccine_profile.eps",
path = "figures",
device = "eps",
width = 7,
height = 7)
# ------------------------------------------------------------------------------
# ------------------------------------------------------------------------------
# further analysis
# -- the impact of current coverage of PCV and Hib vaccines
# -- baseline scenario
vaccine_impact_current <- bind_rows(list(
# impact of current coverage of Hib vaccine on deaths associated with AMR
edit_table(estimate_existing_vaccine_impact(
input_data = deaths_associated_psa)[Counts == "Haemophilus influenzae",]),
# impact of current coverage of Hib vaccine on deaths attributable to AMR
edit_table(estimate_existing_vaccine_impact(
input_data = deaths_attributable_psa)[Counts == "Haemophilus influenzae",]),
# impact of current coverage of Hib vaccine on dalys associated with AMR
edit_table(estimate_existing_vaccine_impact(
input_data = daly_associated_psa)[Counts == "Haemophilus influenzae",]),
# impact of current coverage of Hib vaccine on dalys attributable to AMR
edit_table(estimate_existing_vaccine_impact(
input_data = daly_attributable_psa)[Counts == "Haemophilus influenzae",]),
# impact of current coverage of PCV on deaths associated with AMR
edit_table(estimate_existing_vaccine_impact(
input_data = deaths_associated_psa)[Counts == "Streptococcus pneumoniae",]),
# impact of current coverage of PCV on deaths attributable to AMR
edit_table(estimate_existing_vaccine_impact(
input_data = deaths_attributable_psa)[Counts == "Streptococcus pneumoniae",]),
# impact of current coverage of PCV on dalys associated with AMR
edit_table(estimate_existing_vaccine_impact(
input_data = daly_associated_psa)[Counts == "Streptococcus pneumoniae",]),
# impact of current coverage of PCV on dalys attributable to AMR
edit_table(estimate_existing_vaccine_impact(
input_data = daly_attributable_psa)[Counts == "Streptococcus pneumoniae",])))
vaccine_impact_current$type <- rep(c("death_associated", "death_attributable", "daly_associated", "daly_attributable"), 2)
fwrite (x    = vaccine_impact_current,
file = file.path("tables", "Table_avertible_burden_with_current_coverage.csv"))
# ------------------------------------------------------------------------------
# [table in appendix] vaccine avertable health burdens associated with and attributable
# to AMR by WHO region, pathogen, disease presentation, and age group
# vaccine avertable AMR burden estimates using the burden estimate median value
# create vaccine avertable burden file -- Baseline Scenario
AMR_death_data_updated <- update_death_burden(
input_susceptible            = read_csv(file.path("tables", "susceptible_burden.csv")),
input_associated             = read_csv(file.path("tables", "associated_burden.csv")),
input_attributable           = read_csv(file.path("tables", "attributable_burden.csv")),
burden_dt                    = death_burden_dt,
AMR_burden_data_updated_file = file.path ("tables", "AMR_death_data_baseline.csv"),
input_scenario               = "conservative")
AMR_daly_data_updated  <- update_death_burden(
input_susceptible            = read_csv(file.path("tables", "daly_susceptible_burden.csv")),
input_associated             = read_csv(file.path("tables", "daly_associated_burden.csv")),
input_attributable           = read_csv(file.path("tables", "daly_attributable_burden.csv")),
burden_dt                    = daly_burden_dt,
AMR_burden_data_updated_file = file.path ("tables", "AMR_daly_data_baseline.csv"),
input_scenario               = "conservative")
# create vaccine avertable burden file -- High-potential Scenario
AMR_death_data_updated  <- update_death_burden(
input_susceptible            = read_csv(file.path("tables", "susceptible_burden.csv")),
input_associated             = read_csv(file.path("tables", "associated_burden.csv")),
input_attributable           = read_csv(file.path("tables", "attributable_burden.csv")),
burden_dt                    = death_burden_dt,
AMR_burden_data_updated_file = file.path ("tables", "AMR_death_data_high_potential.csv"),
input_scenario               = "optimistic")
AMR_daly_data_updated <- update_death_burden(
input_susceptible            = read_csv(file.path("tables", "daly_susceptible_burden.csv")),
input_associated             = read_csv(file.path("tables", "daly_associated_burden.csv")),
input_attributable           = read_csv(file.path("tables", "daly_attributable_burden.csv")),
burden_dt                    = daly_burden_dt,
AMR_burden_data_updated_file = file.path ("tables", "AMR_daly_data_high_potential.csv"),
input_scenario               = "optimistic")
# ------------------------------------------------------------------------------
# [graph in appendix] vaccine avertable deaths by infectious syndrome and pathogen
deaths_associated_dp_pathogen   <-
aggregate_impact_by_dp_pathogen(input_data = deaths_associated_psa,
input_rep  = 1:62)
deaths_attributable_dp_pathogen <-
aggregate_impact_by_dp_pathogen(input_data = deaths_attributable_psa,
input_rep  = 1:62)
daly_associated_dp_pathogen     <-
aggregate_impact_by_dp_pathogen(input_data = daly_associated_psa,
input_rep  = 1:63)
daly_attributable_dp_pathogen   <-
aggregate_impact_by_dp_pathogen(input_data = daly_attributable_psa,
input_rep  = 1:61)
# create graph of vaccine impact by infectious syndrome and pathogen
burden_averted_by_dp_pat(data_input = deaths_associated_dp_pathogen,
image_png  = file.path("figures",
"Figure_deaths_associated_dp_pat.png"),
image_eps  = file.path("figures",
"Figure_deaths_associated_dp_pat.eps"))
burden_averted_by_dp_pat(data_input = deaths_attributable_dp_pathogen,
image_png  = file.path("figures",
"Figure_deaths_attributable_dp_pat.png"),
image_eps  = file.path("figures",
"Figure_deaths_attributable_dp_pat.eps"))
burden_averted_by_dp_pat(data_input = daly_associated_dp_pathogen,
image_png  = file.path("figures",
"Figure_daly_associated_dp_pat.png"),
image_eps  = file.path("figures",
"Figure_daly_associated_dp_pat.eps"))
burden_averted_by_dp_pat(data_input = daly_attributable_dp_pathogen,
image_png  = file.path("figures",
"Figure_daly_attributable_dp_pat.png"),
image_eps  = file.path("figures",
"Figure_daly_attributable_dp_pat.eps"))
# ------------------------------------------------------------------------------
# ------------------------------------------------------------------------------
# return to source directory
setwd (source_wd)
# end time
end_time <- Sys.time ()
print (paste0 ("end time = ", end_time))
print (Sys.time () - start_time)
# ------------------------------------------------------------------------------
setwd("~/GitHub/vaccine_amr/code")
# ----------------------------------------------------------------------------
# main analysis.R
#
# main analysis
# to estimate the vaccine avertable bacterial antimicrobial resistance burden
# based on profiles of existing and future vaccines
# at the global and regional levels
# -----------------------------------------------------------------------------
# load libraries
library (readr)
library (readxl)
library (dplyr)
library (ggplot2)
library (reshape2)
library (tidyverse)
library (scales)
library (data.table)
library (ggplot2)
library (rriskDistributions)
library (formattable)
library (patchwork)
library (Cairo)
library (webr)
# remove all objects from workspace
rm (list = ls ())
# start time
start_time <- Sys.time ()
print (paste0 ("start time = ", start_time))
# source functions
source ("functions.R")
# move to base directory (run code from source directory)
source_wd <- getwd ()
setwd ("../")
# ------------------------------------------------------------------------------
## IHME data on the AMR burden ##
# WHO regions: Africa, Americas, Eastern Mediterranean, Europe, South-East Asia,
#              Western Pacific, Unclassified
# year: 2019
# sex: both
# ------------------------------------------------------------------------------
# estimate regional vaccine coverage for existing vaccines in 2018 and 2019
# - HIB vaccine, PCV
existing_vaccine_coverage (year = "2019",
hib_coverage_file = file.path("tables", "hib coverage 2019.csv"),
pcv_coverage_file = file.path("tables", "pcv coverage 2019.csv"))
existing_vaccine_coverage (year = "2018",
hib_coverage_file = file.path("tables", "hib coverage 2018.csv"),
pcv_coverage_file = file.path("tables", "pcv coverage 2018.csv"))
# ------------------------------------------------------------------------------
# create data table of AMR burden (deaths) classified
# by pathogen, WHO region, disease presentation, and age groups
options(scipen=999)
death_burden_dt <- read_excel(file.path("data", "IHME_AMR_burden.xlsx"),
col_names = FALSE)
death_burden_dt <- create_burden_table(AMR_burden  = death_burden_dt,
burden_file = file.path ("tables", "AMR_death_burden.csv"))
# create data table of AMR burden (DALYs) classified
# by pathogen, WHO region, disease presentation, and age groups
daly_burden_dt <- read_excel(file.path("data", "IHME_AMR_burden_DALYs.xlsx"),
col_names = FALSE)
daly_burden_dt <- create_burden_table(AMR_burden = daly_burden_dt,
burden_file = file.path ("tables", "AMR_daly_burden.csv"))
# ------------------------------------------------------------------------------
# create data table of vaccine profile
vaccine_profile_file <-
read_excel(file.path("data", "Vaccine_profile_assumptions.xlsx"),
sheet = "Vaccine profile _ input")
vaccine_profile_dt <-
create_vaccine_profile_table(vaccine_profile = vaccine_profile_file,
vaccine_profile_file = file.path("tables", "vaccine_profile.csv"))
# ------------------------------------------------------------------------------
# create combined table: vaccine profile + disease burden (deaths)
# create separate burden file for health burdens attributable to AMR and associated with AMR
combined_dt <-
create_combined_table(death_burden_dt          = death_burden_dt,
vaccine_profile_dt       = vaccine_profile_dt,
susceptible_burden_file  = file.path("tables", "susceptible_burden.csv"),
attributable_burden_file = file.path("tables", "attributable_burden.csv"),
associated_burden_file   = file.path("tables", "associated_burden.csv"))
# create combined table: vaccine profile + disease burden (DALYs)
# create separate burden file for health burdens attributable to AMR and associated with AMR
daly_combined_dt <-
create_combined_table(death_burden_dt          = daly_burden_dt,
vaccine_profile_dt       = vaccine_profile_dt,
susceptible_burden_file  = file.path("tables", "daly_susceptible_burden.csv"),
attributable_burden_file = file.path("tables", "daly_attributable_burden.csv"),
associated_burden_file   = file.path("tables", "daly_associated_burden.csv"))
# ------------------------------------------------------------------------------
# estimate pre-vaccine burden for existing vaccines -- HIB vaccine & PCV
estimate_prevaccination_burden(
burden_input = read_csv(file.path("tables", "associated_burden.csv")),
burden_file  = file.path("tables", "associated_burden.csv"))
estimate_prevaccination_burden(
burden_input = read_csv(file.path("tables", "attributable_burden.csv")),
burden_file  = file.path("tables", "attributable_burden.csv"))
estimate_prevaccination_burden(
burden_input = read_csv(file.path("tables", "susceptible_burden.csv")),
burden_file  = file.path("tables", "susceptible_burden.csv"))
estimate_prevaccination_burden(
burden_input = read_csv(file.path("tables", "daly_associated_burden.csv")),
burden_file  = file.path("tables", "daly_associated_burden.csv"))
estimate_prevaccination_burden(
burden_input = read_csv(file.path("tables", "daly_attributable_burden.csv")),
burden_file  = file.path("tables", "daly_attributable_burden.csv"))
estimate_prevaccination_burden(
burden_input = read_csv(file.path("tables", "daly_susceptible_burden.csv")),
burden_file  = file.path("tables", "daly_susceptible_burden.csv"))
# ------------------------------------------------------------------------------
set.seed (3)  # seed for random number generator
run <- 1000 # number of runs for probabilistic sensitivity analysis
vaccine_profile_dt_add <- read_csv(file.path("tables", "vaccine_profile.csv"))
View(vaccine_profile_dt_add)
Associated_death_averted_vp <- vaccine_imapct_by_vaccine(
data_in = read_csv(file.path("tables", "deaths_associated_psa.csv")),
mode_in = "baseline")
1-0.4367
1-0.4397
Associated_death_averted_vp
data_input <- file.path("tables", "deaths_associated_psa.csv")
data_input <- read_csv(file.path("tables", "deaths_associated_psa.csv"))
View(data_input)
burden_add <- data.table(data_input) %>%
filter(Pathogen == "Escherichia coli")
View(burden_add)
View(Associated_death_averted_vp)
View(burden_add)
burden_add[,-c(va_base, va_high, va_incre)]
View(burden_add)
burden_add <- burden_add[,-c(va_base, va_high, va_incre)]
data_input <- read_csv(file.path("tables", "deaths_associated_psa.csv"))
data_input
View(data_input)
va <-  data_input %>%
filter(Pathogen == "Escherichia coli")
View(va)
va <- data.table(va)
va[, va_age := 0]
(1-0.4397)
View(va)
va%>%count(Disease_presentation)
va <-  data_input %>%
filter(Pathogen == "Escherichia coli")
va <- data.table(va)
va[, va_age := 0]
# using existing Hib vaccine efficacy
va[(VC == "6 weeks" |
VC == "6 weeks & elderly age group") &
Duration == "5 years" & Age_group == "PN",
va_age := burden_psa * Efficacy * Coverage * 45/48]
va[(VC == "6 weeks" |
VC == "6 weeks & elderly age group") &
Duration == "5 years" & Age_group == "1 to 4",
va_age := burden_psa * Efficacy * Coverage]
va[(VC == "6 weeks" |
VC == "6 weeks & elderly age group") &
Duration=="5 years" & Age_group == "5 to 9",
va_age := burden_psa * Efficacy * Coverage * 1/5 * 7/52]
va[VC == "6 weeks & elderly age group" &
HBG == "75 years" & Duration == "5 years" &
Age_group == "75 to 79",
va_age := burden_psa * Efficacy * Coverage]
# apply vaccine assumptions to the ETEC proportion of the disease
va[Pathogen == "Escherichia coli" & Disease_presentation == "Diarrhoea",
va_age := va_age * (1-0.4397)]
View(va)
View(va)
View(va)
64.09678058 * 0.7 * 0.7
77.02545036 * 0.7 * 0.7
64.09678058 * 0.7 * 0.7 * 45/48
18.01320881 * 0.7 * 0.7 * 45/48 * 7/52
18.01320881 * 0.7 * 0.7 * 1/5 * 7/52
326.96115246 *
326.96115246 * 0.7 * 0.7
View(va)
va <- data.table(va)
va[, va_age := 0]
View(va)
va[, efficacy := 0.7]
View(va)
# using existing Hib vaccine efficacy
va[(VC == "6 weeks" |
VC == "6 weeks & elderly age group") &
Duration == "5 years" & Age_group == "PN",
va_age := burden_psa * Efficacy * Coverage * 45/48]
va[(VC == "6 weeks" |
VC == "6 weeks & elderly age group") &
Duration == "5 years" & Age_group == "1 to 4",
va_age := burden_psa * Efficacy * Coverage]
va[(VC == "6 weeks" |
VC == "6 weeks & elderly age group") &
Duration=="5 years" & Age_group == "5 to 9",
va_age := burden_psa * Efficacy * Coverage * 1/5 * 7/52]
va[VC == "6 weeks & elderly age group" &
HBG == "75 years" & Duration == "5 years" &
Age_group == "75 to 79",
va_age := burden_psa * Efficacy * Coverage]
# apply vaccine assumptions to the ETEC proportion of the disease
va[Pathogen == "Escherichia coli" & Disease_presentation == "Diarrhoea",
va_age := va_age * (1-0.4397)]
# create table for avertable death estimates by vaccine profile
# -- Baseline Scenario
data_input <- read_csv(file.path("tables", "deaths_associated_psa.csv"))
va <-  data_input %>%
filter(Pathogen == "Escherichia coli")
va <- data.table(va)
va[, va_age := 0]
va[, Efficacy := 0.7]
# using existing Hib vaccine efficacy
va[(VC == "6 weeks" |
VC == "6 weeks & elderly age group") &
Duration == "5 years" & Age_group == "PN",
va_age := burden_psa * Efficacy * Coverage * 45/48]
va[(VC == "6 weeks" |
VC == "6 weeks & elderly age group") &
Duration == "5 years" & Age_group == "1 to 4",
va_age := burden_psa * Efficacy * Coverage]
va[(VC == "6 weeks" |
VC == "6 weeks & elderly age group") &
Duration=="5 years" & Age_group == "5 to 9",
va_age := burden_psa * Efficacy * Coverage * 1/5 * 7/52]
va[VC == "6 weeks & elderly age group" &
HBG == "75 years" & Duration == "5 years" &
Age_group == "75 to 79",
va_age := burden_psa * Efficacy * Coverage]
# apply vaccine assumptions to the ETEC proportion of the disease
va[Pathogen == "Escherichia coli" & Disease_presentation == "Diarrhoea",
va_age := va_age * (1-0.4397)]
View(va)
data_input <- read_csv(file.path("tables", "deaths_associated_psa.csv"))
va <-  data_input %>%
filter(Pathogen == "Escherichia coli")
va <- data.table(va)
va[, va_age := 0]
# using existing Hib vaccine efficacy
va[Age_group == "PN",
va_age := burden_psa * Efficacy * Coverage * 45/48]
va[Age_group == "1 to 4",
va_age := burden_psa * Efficacy * Coverage]
va[Age_group == "5 to 9",
va_age := burden_psa * Efficacy * Coverage * 1/5 * 7/52]
va[Age_group == "75 to 79",
va_age := burden_psa * Efficacy * Coverage]
# apply vaccine assumptions to the ETEC proportion of the disease
va[Pathogen == "Escherichia coli" & Disease_presentation == "Diarrhoea",
va_age := va_age * (1-0.4397)]
View(va)
7541.5253712 * 0.7 * 0.7 * (1-0.4397)
7541.5253712 * 0.7 * 0.7
7541.5253712 * 0.7 * 0.7 * (1-0.4397)
7541.5253712 * 0.7 * 0.7 * (1-0.4397)
7541.5253712 * 0.7 * 0.7 * (1-0.4397)
(1-0.4397)
# create table for avertable death estimates by vaccine profile
# -- Baseline Scenario
data_input <- read_csv(file.path("tables", "deaths_associated_psa.csv"))
va <-  data_input %>%
filter(Pathogen == "Escherichia coli")
va <- data.table(va)
va[, va_age := 0]
# using existing Hib vaccine efficacy
va[Age_group == "PN",
va_age := burden_psa * Efficacy * Coverage * 45/48]
va[Age_group == "1 to 4",
va_age := burden_psa * Efficacy * Coverage]
va[Age_group == "5 to 9",
va_age := burden_psa * Efficacy * Coverage * 1/5 * 7/52]
va[Age_group == "75 to 79",
va_age := burden_psa * Efficacy * Coverage]
# apply vaccine assumptions to the ETEC proportion of the disease
va[Pathogen == "Escherichia coli" & Disease_presentation == "Diarrhoea",
va_age := va_age * (1-0.4397)]
data_input <- read_csv(file.path("tables", "deaths_associated_psa.csv"))
va <-  data_input %>%
filter(Pathogen == "Escherichia coli")
va <- data.table(va)
va[, va_age := 0]
va[, Efficacy := 0.7]
# using existing Hib vaccine efficacy
va[Age_group == "PN",
va_age := burden_psa * Efficacy * Coverage * 45/48]
va[Age_group == "1 to 4",
va_age := burden_psa * Efficacy * Coverage]
va[Age_group == "5 to 9",
va_age := burden_psa * Efficacy * Coverage * 1/5 * 7/52]
va[Age_group == "75 to 79",
va_age := burden_psa * Efficacy * Coverage]
# apply vaccine assumptions to the ETEC proportion of the disease
va[Pathogen == "Escherichia coli" & Disease_presentation == "Diarrhoea",
va_age := va_age * (1-0.4397)]
7.02545036 * 0.7 * 0.7
77.02545036 * 0.7 * 0.7
7541.5253712 * 0.7 * 0.7
7541.5253712 * 0.7 * 0.7 * (1-0.4397)
176.5974174
* 0.7 * 0.7 * (1-0.4397)
176.5974174 * 0.7 * 0.7 * (1-0.4397)
7093.2449308 * 0.7 * 0.7 * (1-0.4397) * 45/48
611.7944651 * 0.7 * 0.7 * (1-0.4397) * 1/5 * 7/52
impact_by_pathogen <- vaccine_impact %>%
group_by(Pathogen, run_id) %>%
summarise(averted_burden = sum(va_health_burden), .groups = 'drop')
impact_by_pathogen <- va %>%
group_by(Pathogen, run_id) %>%
summarise(averted_burden = sum(va_health_burden), .groups = 'drop')
# aggregate impact by run_id
impact_by_pathogen <- va %>%
group_by(Pathogen, run_id) %>%
summarise(averted_burden = sum(va_age), .groups = 'drop')
impact_by_pathogen
# aggregate impact by pathogen
burden_averted_pathogen <- data.table("50%"=numeric(), "2.5%"=numeric(), "97.5%"=numeric())
existingvaccine <- c("Escherichia coli")
for(i in existingvaccine){
dt <- impact_by_pathogen %>% filter(Pathogen == i)
dt <- quantile(x = dt$averted_burden, probs = c (0.5, 0.025, 0.975))
dt <- data.table(t(dt))
burden_averted_pathogen <- rbindlist (list (burden_averted_pathogen, dt),
use.names = FALSE)
}
burden_averted_pathogen
Burden_Averted <- cbind(data.table(Counts=existingvaccine, burden_averted_pathogen))
Burden_Averted <- Burden_Averted[,c("Counts", "2.5%", "50%", "97.5%")]
Burden_Averted
data_input <- read_csv(file.path("tables", "deaths_associated_psa.csv"))
va <-  data_input %>%
filter(Pathogen == "Escherichia coli")
va <- data.table(va)
va[, va_age := 0]
va[, Efficacy := 0.7]
# using existing Hib vaccine efficacy
va[Age_group == "PN",
va_age := burden_psa * Efficacy * Coverage * 45/48]
va[Age_group == "1 to 4",
va_age := burden_psa * Efficacy * Coverage]
va[Age_group == "5 to 9",
va_age := burden_psa * Efficacy * Coverage * 1/5 * 7/52]
va[Age_group == "75 to 79",
va_age := burden_psa * Efficacy * Coverage]
# apply vaccine assumptions to the ETEC proportion of the disease
va[Pathogen == "Escherichia coli" & Disease_presentation == "Diarrhoea",
va_age := va_age * (1-0.4397)]
# aggregate impact by run_id
impact_by_pathogen <- va %>%
group_by(Pathogen, run_id) %>%
summarise(averted_burden = sum(va_age), .groups = 'drop')
# aggregate impact by pathogen
burden_averted_pathogen <- data.table("50%"=numeric(), "2.5%"=numeric(), "97.5%"=numeric())
existingvaccine <- c("Escherichia coli")
for(i in existingvaccine){
dt <- impact_by_pathogen %>% filter(Pathogen == i)
dt <- quantile(x = dt$averted_burden, probs = c (0.5, 0.025, 0.975))
dt <- data.table(t(dt))
burden_averted_pathogen <- rbindlist (list (burden_averted_pathogen, dt),
use.names = FALSE)
}
Burden_Averted <- cbind(data.table(Counts=existingvaccine, burden_averted_pathogen))
Burden_Averted <- Burden_Averted[,c("Counts", "2.5%", "50%", "97.5%")]
Burden_Averted
avertable_burden <- Burden_Averted[,c("Counts", "2.5%", "50%", "97.5%")]
avertable_burden [,2:4] <-
lapply(avertable_burden[,2:4], function(x) comma(x,  format = "d"))
avertable_burden
avertable_burden [, burden_averted :=
paste(avertable_burden$"50%","(",
avertable_burden$"2.5%","-",
avertable_burden$"97.5%",")")]
avertable_burden
